{"version":3,"file":"static/js/869.88082d78.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactInputForm/ContactInputForm.js","components/ContactsListForm/ContactsListForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/PhoneBook.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectLoading = state => state.task.isLoading;\n\nexport const selectAllTasks = state => state.task.items;\n\nexport const selectValueFilter = state => state.filter.value;\n\n\nexport const selectFilteredContacts = createSelector(\n    [selectAllTasks,  selectValueFilter],\n    (task, value) => {\n      const filterToLowerCase = value.toLowerCase();\n      return task.filter(contact =>\n       contact.name.toLowerCase().includes(filterToLowerCase)\n      \n    );\n  }\n);\n","import { useDispatch, useSelector } from \"react-redux\";\nimport React from 'react';\nimport { addTask } from \"redux/contacts/operations\";\nimport { selectAllTasks } from 'redux/contacts/selectors';\n\nimport { FaPhoneAlt } from \"react-icons/fa\";\nimport { AiOutlineUser } from 'react-icons/ai';\nimport { toast } from 'react-toastify';\nimport {FormControl,FormLabel, Button, Input, InputLeftElement, InputGroup} from '@chakra-ui/react'\n\nexport const ContactInputForm = () => {\n    const contactlist = useSelector(selectAllTasks );\n    const dispatch = useDispatch();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        const contacts = { name, number };\n \n        const findTheSameName = contactlist.find(\n            contactName => contactName.name.toLowerCase() === name.toLowerCase());\n\n        if (findTheSameName) {\n            // form.reset();            \n            return toast.error(`${name} is already in the contact list`, {\n                        position: toast.POSITION.TOP_LEFT,\n                        autoClose: 2000,\n                        pauseOnHover: true,\n                        draggable: true,\n                        });\n                // alert(`${name} is already in the contact list`)\n        };\n        \n        if (name !== '' && number !== '') {\n            dispatch(addTask(contacts));\n            form.reset();\n            return;\n        }\n        alert('Task cannot be empty. Enter some text!');\n    };\n\n    return (\n        <FormControl>\n                  <form onSubmit={handleSubmit}>\n                <FormLabel fontSize='40px' marginTop='10px'>Phone book</FormLabel>\n                \n                <FormLabel fontSize='20px' fontWeight='500'\n                >Name:</FormLabel>\n                <InputGroup>\n                    <InputLeftElement pointerEvents=\"none\">\n                        <AiOutlineUser size='20px'  color='black' />\n                    </InputLeftElement>\n                    <Input\n                            paddingLeft='40px'\n                    width='300px'\n                    variant='outline'\n                    placeholder='Name'\n                    size='md'\n                    border='0.1rem solid'\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                        autoComplete=\"off\" />\n                </InputGroup>                         \n                \n                <FormLabel marginTop='10px' fontSize='20px' fontWeight='500'\n                >Number:</FormLabel>\n                <InputGroup>\n                    <InputLeftElement pointerEvents=\"none\">\n                        <FaPhoneAlt color='gray.300' />\n                    </InputLeftElement>\n                    <Input\n                        paddingLeft='40px'\n                    width='300px'\n                    variant='outline'\n                    placeholder='Phone number'\n                    size='md'\n                    border='0.1rem solid'                    \n                type=\"text\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                        autoComplete=\"off\" />\n                </InputGroup>\n                <FormLabel>\n                    <Button\n                        marginBottom='50px'\n                        marginTop='10px'\n                        type=\"submit\"\n                        colorScheme='blue'\n                        size='md'>Add Contact</Button>\n                </FormLabel>\n            </form>\n         </FormControl>      \n    );\n}\n","import { useDispatch } from \"react-redux\";\nimport { deleteTask } from 'redux/contacts/operations';\n\nimport { Button } from '@chakra-ui/react'\nimport { Box, Text, Flex, Spacer, Container} from '@chakra-ui/react'\n\n\nexport const ContactsListForm = ({ id, name, number}) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteTask(id));\n\n    return (\n    \n        <Flex display='flex'\n                alignItems='center'\n                color='balck'\n            width='100%'\n            height='20'\n            bg='gray.50'\n            border='1px'\n            borderRadius='10'\n        mt='3'>\n  <Box p='4' >\n      <Container> <Text> {name}: +{number}</Text>   </Container>\n  </Box>\n  <Spacer />\n  <Box p='4' >\n       \n             <Button\n                height='60px'\n                width='250px'\n                border='2px'\n                size='lg'\n                colorScheme='blue'\n                fontSize='20px'\n                _hover={{ bg: 'red' }}\n                _active={{ bg: '#dddfe2',\n    transform: 'scale(0.98)',\n                    borderColor: '#bec3c9',\n                }}\n                _focus={{\n    boxShadow:\n      '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n  }}\n                onClick={handleDelete}>\n                Delete Contact\n                </Button>       \n  </Box>  \n</Flex>\n    );\n};","import { useSelector } from \"react-redux\";\nimport { ContactsListForm} from '../ContactsListForm/ContactsListForm';\nimport { selectFilteredContacts} from \"redux/contacts/selectors\";\nimport { FormLabel,} from '@chakra-ui/react'\n\nexport const ContactList = () => {\n\n    const filteredContacts = useSelector(selectFilteredContacts);\n\n    return (\n        <>               \n                <FormLabel fontSize='30px' marginTop='10px'>Contacts:\n                        {filteredContacts.map(({ id, name, number }) => (\n                <div key={id}>\n                <ContactsListForm id={id} name={name} number={number} />                    \n                    </div>\n                        ))}\n                 </FormLabel>    \n        </>\n    );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { findContact } from \"redux/contacts/filterSlice\";\nimport { selectFilteredContacts } from 'redux/contacts/selectors'\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { ImSearch } from 'react-icons/im';\nimport { Alert, AlertTitle, AlertIcon, AlertDescription, } from \"@chakra-ui/alert\"\nimport { FormControl, FormLabel, Input, InputLeftElement, InputGroup } from '@chakra-ui/react'\n\n\nexport const FilterContact = () => {\n  const dispatch = useDispatch();\nconst filteredContacts = useSelector(selectFilteredContacts);\n    \n  const handleFilterContacts = e => {\n    const value= e.target.value;\n    dispatch(findContact(value));\n  };\n    return (\n        <FormControl>\n \n        <FormLabel fontSize='20px' fontWeight='400' marginTop='10px'>Find contacts by name:</FormLabel>\n        <InputGroup>\n              <InputLeftElement pointerEvents=\"none\">\n                        <ImSearch size='20px'  color='black' />\n                    </InputLeftElement>\n          \n          <Input\n                paddingLeft='40px'\n                    marginBottom='50px'\n                    width='300px'\n                    variant='outline'\n                    placeholder='Enter name to find'\n          size='md'\n          border ='darkblue solid'\n          type=\"text\"\n          name=\"name\"\n          onChange={handleFilterContacts}\n        />    \n        </InputGroup> \n\n  { filteredContacts.length !== 0\n                    ?\n        <ContactList />\n          :\n                <Alert status='error'  variant='subtle'\n  flexDirection='column'\n  alignItems='center'\n  justifyContent='center'\n  textAlign='center'\n            height='120px'>\n                    <AlertIcon />\n                    <AlertTitle>There are no phone numbers that match your search!</AlertTitle>\n                    <AlertDescription>Please search again.</AlertDescription>\n                </Alert>        \n        }  \n        </FormControl>\n    );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport {  ContactInputForm} from 'components/ContactInputForm/ContactInputForm';\nimport { fetchTasks } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { FilterContact } from 'components/Filter/Filter';\nimport { selectAllTasks } from 'redux/contacts/selectors'\n\nimport { Spinner } from '@chakra-ui/react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n \nexport default function PhoneBook() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n    const tasks = useSelector(selectAllTasks);\n\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n            <title>Your Contacts List</title>\n            </Helmet>\n          <ToastContainer />\n            < ContactInputForm />         \n            <div>{isLoading && <Spinner\n                thickness='4px'\n                speed='0.65s'\n                emptyColor='gray.200'\n                color='blue.500'\n                size='xl' />}</div>\n          <div> {tasks.length !== 0 && < FilterContact />}</div>     \n        </>\n    )\n}"],"names":["selectLoading","state","task","isLoading","selectAllTasks","items","selectFilteredContacts","createSelector","filter","value","filterToLowerCase","toLowerCase","contact","name","includes","ContactInputForm","contactlist","useSelector","dispatch","useDispatch","onSubmit","event","preventDefault","form","currentTarget","elements","number","contacts","find","contactName","toast","position","autoClose","pauseOnHover","draggable","addTask","reset","alert","fontSize","marginTop","fontWeight","pointerEvents","size","color","I","paddingLeft","width","variant","placeholder","border","type","pattern","title","required","autoComplete","marginBottom","colorScheme","ContactsListForm","id","display","alignItems","height","bg","borderRadius","mt","p","_hover","_active","transform","borderColor","_focus","boxShadow","onClick","deleteTask","ContactList","filteredContacts","map","FilterContact","onChange","e","target","findContact","length","status","flexDirection","justifyContent","textAlign","PhoneBook","tasks","useEffect","fetchTasks","Helmet","thickness","speed","emptyColor"],"sourceRoot":""}